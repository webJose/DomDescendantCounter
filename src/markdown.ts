// Markdown generation utilities
import type { DescendantData } from './types.js';
import { sortTableData } from './table-sort.js';

// Refactored function to generate markdown table only
export function generateMarkdownTable(data: DescendantData): string {
    const formatter = Intl.NumberFormat();
    
    let markdown = `| Node Type/Tag | Count | Visible |\n`;
    markdown += `|---------------|-------|----------|\n`;
    
    // Use the same sorting as the UI table
    const sortedEntries = sortTableData(data.counts);
    
    sortedEntries.forEach(([nodeType, counts]) => {
        markdown += `| ${nodeType} | ${formatter.format(counts.count)} | ${formatter.format(counts.visible)} |\n`;
    });
    
    return markdown;
}

// Export to Markdown functionality
export function exportToMarkdown(data: DescendantData | null) {
    if (!data || !data.counts) {
        alert('No data to export. Please select an element first.');
        return;
    }

    const nodeTitle = data.currentNode 
        ? `${data.currentNode.tag}${data.currentNode.id ? '#' + data.currentNode.id : ''}${data.currentNode.classList.length ? '.' + data.currentNode.classList.join('.') : ''}`
        : 'Unknown Element';

    const formatter = Intl.NumberFormat();
    
    let markdown = `# Descendant Node Counts\n\n`;
    markdown += `**Selected Element:** \`${nodeTitle}\`\n\n`;
    markdown += `**Total Descendants:** ${formatter.format(data.total)}\n`;
    markdown += `**Visible Descendants:** ${formatter.format(data.visible)}\n\n`;
    
    markdown += `## Node Type Breakdown\n\n`;
    markdown += generateMarkdownTable(data);
    
    markdown += `\n---\n*Generated by DOM Descendant Counter extension on ${new Date().toLocaleString()}*\n`;
    
    // Create and trigger download
    const blob = new Blob([markdown], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `dom-counts-${nodeTitle.replace(/[^a-zA-Z0-9]/g, '_')}-${Date.now()}.md`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
}
